openapi: 3.0.1
info:
  title: Virtual Collection Registry REST API
  description: The Virtual Collection Registry (VCR) REST API is documented following
    the open API specification. The UI on this page.allows you to test and play with
    the various resources.<br />Description of the API protocol is available <a href="../Protocol.txt">here</a>.<br
    /><br />In addition to the REST API there are submission endpoints available to
    provide a low friction integration with external data catalogues. Documentation
    is available <a href="https://github.com/clarin-eric/VirtualCollectionRegistry/blob/master/doc/Integration.md">here</a>.<br
    />Submission endpoint test paages:<ul><li><a target="_new" href="../test_vc_submission_extensional.html">Extensional
    collections</a></li><li><a target="_new" href="../test_vc_submission_intensional.html">Intensional
    collections</a></li></ul><br />Code repository is hosted on <a href="https://github.com/clarin-eric/VirtualCollectionRegistry">GitHub</a>.
  version: 1.0.0
servers:
- url: http://localhost:8080/vcr/service
  description: Local API endpoint
  variables: {}
paths:
  /:
    get:
      operationId: getDescription
      responses:
        default:
          description: default response
          content:
            text/xml: {}
  /my-virtualcollections:
    get:
      summary: Retrieve a list of private collections
      description: Retrieve a list of private collections for the user identified
        via the supplied API key.
      operationId: getMyVirtualCollections
      parameters:
      - name: q
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        schema:
          type: integer
          format: int32
          default: -1
      responses:
        "401":
          description: Missing or invalid API key in Authorization header.
          content:
            text/html: {}
        "500":
          description: Unexpected server side error.
          content:
            text/html: {}
        "200":
          description: List of all collections for the authenticated user.
          content:
            application/json: {}
            application/xml: {}
      security:
      - apiKey: []
  /v1/collections:
    get:
      summary: Retrieve a list of public collections
      description: Retrieve a list of public collections.
      operationId: getVirtualCollections
      parameters:
      - name: q
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - name: count
        in: query
        schema:
          type: integer
          format: int32
          default: -1
      responses:
        default:
          description: default response
          content:
            text/xml: {}
            application/xml: {}
            application/json: {}
    post:
      summary: Create a new collection
      description: "A virtual collection will be created based on the representation\
        \ of the virtual collection sent in the request body. ID and state, if provided,\
        \ will be ignored so this will always result in a private collection with\
        \ a new identifier."
      operationId: createVirtualCollection
      requestBody:
        content:
          text/xml:
            schema:
              type: object
          application/xml:
            schema:
              type: object
          application/json:
            schema:
              type: object
      responses:
        "401":
          description: Missing or invalid API key in Authorization header.
          content:
            text/html: {}
        "500":
          description: Unexpected server side error.
          content:
            text/html: {}
        "200":
          description: Representation of the created collection.
          content:
            application/json: {}
            application/xml: {}
      security:
      - apiKey: []
  /v1/collections/{id}:
    get:
      operationId: getVirtualCollectionDetailsRedirect
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            text/html: {}
    put:
      summary: 'Update a virtual collection '
      description: "The virtual collection identified by the URI will be updated,\
        \ actually replaced, with the representation of the virtual collection sent\
        \ in the request body."
      operationId: updateVirtualCollection
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          text/xml:
            schema:
              type: object
          application/xml:
            schema:
              type: object
          application/json:
            schema:
              type: object
      responses:
        "401":
          description: Missing or invalid API key in Authorization header.
          content:
            text/html: {}
        "500":
          description: Unexpected server side error.
          content:
            text/html: {}
        "200":
          description: Representation of the updated collection.
          content:
            application/json: {}
            application/xml: {}
      security:
      - apiKey: []
    delete:
      summary: 'Delete a virtual collection '
      description: The virtual collection referenced by the URI will be deleted.
      operationId: deleteVirtualCollection
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Missing or invalid API key in Authorization header.
          content:
            text/html: {}
        "500":
          description: Unexpected server side error.
          content:
            text/html: {}
        "200":
          content:
            application/json: {}
            application/xml: {}
      security:
      - apiKey: []
  /v1/collections/{id}/state:
    get:
      summary: Retrieve virtual collection publication state.
      description: Retrieve the publication state of the virtual collection referenced
        by the URI .
      operationId: getVirtualCollectionState
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            text/xml: {}
            application/xml: {}
            application/json: {}
    post:
      summary: Update virtual collection publication state.
      description: Update the publication state of the virtual collection referenced
        by the URI .
      operationId: setVirtualCollectionState
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          text/xml:
            schema:
              type: string
              xml:
                name: State
              enum:
              - private
              - public
              - public_frozen
          application/xml:
            schema:
              type: string
              xml:
                name: State
              enum:
              - private
              - public
              - public_frozen
          application/json:
            schema:
              type: string
              xml:
                name: State
              enum:
              - private
              - public
              - public_frozen
      responses:
        default:
          description: default response
          content:
            text/xml: {}
            application/xml: {}
            application/json: {}
components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: Authorization
      in: header
