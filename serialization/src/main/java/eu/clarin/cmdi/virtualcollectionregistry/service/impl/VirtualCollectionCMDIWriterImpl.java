package eu.clarin.cmdi.virtualcollectionregistry.service.impl;

import eu.clarin.cmdi.virtualcollectionregistry.service.VirtualCollectionCMDICreator;
import eu.clarin.cmdi.virtualcollectionregistry.model.collection.cmdi.CMD;
import eu.clarin.cmdi.virtualcollectionregistry.model.collection.VirtualCollection;
import eu.clarin.cmdi.virtualcollectionregistry.service.VirtualCollectionCMDIWriter;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * CMDI writer that uses the classes in
 * eu.clarin.cmdi.virtualcollectionregistry.model.cmdi generated by the JAXB XJC
 * plugin at build time (based on the virtual collection profile in the CLARIN
 * Component Registry) to build a CMDI instance and then marshals it to the
 * provided XML stream writer
 *
 * @author twagoo
 * @see http://mojo.codehaus.org/jaxb2-maven-plugin/usage.html
 * @see
 * http://catalog.clarin.eu/ds/ComponentRegistry?item=clarin.eu:cr1:p_1271859438175
 */
@Service
public class VirtualCollectionCMDIWriterImpl implements VirtualCollectionCMDIWriter {

    private final static Logger logger = LoggerFactory.getLogger(VirtualCollectionCMDIWriterImpl.class);

    private final VirtualCollectionCMDICreator cmdiCreator;
    private final JAXBContext jc;

    /**
     *
     * @param cmdiCreator creator instance to use for the generation of a CMDI
     * object hierarchy
     * @throws JAXBException if a JAXB context for class {@link CMD} could
     * not be instantiated
     */
    @Autowired
    public VirtualCollectionCMDIWriterImpl(VirtualCollectionCMDICreator cmdiCreator) throws JAXBException {
        this.cmdiCreator = cmdiCreator;
        this.jc = JAXBContext.newInstance(CMD.class);
    }

    /**
     *
     * @param out an XML stream writer that has been initialised
     * ({@link XMLStreamWriter#writeStartDocument()} and
     * ({@link XMLStreamWriter#writeEndDocument() }
     * will <em>not</em> be called!
     * @param vc collection to write as CMDI XML
     * @throws XMLStreamException
     */
    @Override
    public void writeCMDI(XMLStreamWriter out, VirtualCollection vc) throws XMLStreamException {
        logger.debug("Constructing CMDI structure");
        final CMD cmdRoot = cmdiCreator.createMetadataStructure(vc);

        logger.debug("Marshalling CMD");
        try {
            final Marshaller marshaller = jc.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);
            marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, cmdiCreator.getSchemaLocation());
            marshaller.marshal(cmdRoot, out);
        } catch (JAXBException ex) {
            throw new RuntimeException(ex);
        }
    }

}
