package eu.clarin.cmdi.virtualcollectionregistry.service.impl;

import eu.clarin.cmdi.virtualcollectionregistry.model.Creator;
import eu.clarin.cmdi.virtualcollectionregistry.model.Resource;
import eu.clarin.cmdi.virtualcollectionregistry.model.VirtualCollection;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.CMD;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.CMD.Resources.ResourceProxyList.ResourceProxy;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.CMD.Resources.ResourceProxyList.ResourceProxy.ResourceType;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.ComplextypePurpose1;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.ComplextypeReproducability1;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.ComplextypeStatus1;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.ResourcetypeSimple;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.SimpletypePurpose1;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.SimpletypeReproducability1;
import eu.clarin.cmdi.virtualcollectionregistry.model.cmdi.SimpletypeStatus1;
import eu.clarin.cmdi.virtualcollectionregistry.service.VirtualCollectionCMDIWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.TransformerConfigurationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * CMDI writer that uses the classes in
 * eu.clarin.cmdi.virtualcollectionregistry.model.cmdi generated by the JAXB XJC
 * plugin at build time (based on the virtual collection profile in the CLARIN
 * Component Registry) to build a CMDI instance and then marshals it to the
 * provided XML stream writer
 *
 * @author twagoo
 * @see http://mojo.codehaus.org/jaxb2-maven-plugin/usage.html
 * @see
 * http://catalog.clarin.eu/ds/ComponentRegistry?item=clarin.eu:cr1:p_1271859438175
 */
@Service
public class VirtualCollectionCMDIWriterImpl implements VirtualCollectionCMDIWriter {

    private final static Logger logger = LoggerFactory.getLogger(VirtualCollectionCMDIWriterImpl.class);

    ///////// CMDI CONSTANTS            /////////
    private static final String VIRTUAL_COLLECTION_PROFILE_ID
            = "clarin.eu:cr1:p_1271859438175";
    private static final String VIRTUAL_COLLECTION_PROFILE_SCHEMA_LOCATION
            = "http://www.clarin.eu/cmd/ http://catalog.clarin.eu/ds/ComponentRegistry/rest/registry/profiles/"
            + VIRTUAL_COLLECTION_PROFILE_ID
            + "/xsd";
    private static final String CMD_VERSION = "1.1";
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");
    ///////// END OF CMDI CONSTANTS   /////////

    private final JAXBContext jc;
    private final DatatypeFactory dataTypeFactory;

    public VirtualCollectionCMDIWriterImpl() throws TransformerConfigurationException, JAXBException, DatatypeConfigurationException {
        jc = JAXBContext.newInstance(CMD.class);
        dataTypeFactory = DatatypeFactory.newInstance();
    }

    /**
     *
     * @param out an XML stream writer that has been initialised
     * ({@link XMLStreamWriter#writeStartDocument()} and
     * ({@link XMLStreamWriter#writeEndDocument() }
     * will <em>not</em> be called!
     * @param vc collection to write as CMDI
     * @throws IOException
     * @throws XMLStreamException
     */
    @Override
    public void writeCMDI(XMLStreamWriter out, VirtualCollection vc) throws XMLStreamException {
        logger.debug("Constructing CMD");
        final CMD cmdRoot = new CMD();
        cmdRoot.setCMDVersion(CMD_VERSION);
        logger.trace("Creating header");
        cmdRoot.setHeader(createHeader(vc));
        logger.trace("Creating resources");
        cmdRoot.setResources(createResources(vc));
        logger.trace("Creating components");
        cmdRoot.setComponents(createComponents(vc));

        logger.debug("Marshalling CMD");
        try {
            final Marshaller marshaller = jc.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);
            marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, VIRTUAL_COLLECTION_PROFILE_SCHEMA_LOCATION);
            marshaller.marshal(cmdRoot, out);
        } catch (JAXBException ex) {
            throw new RuntimeException(ex);
        }
    }

    private CMD.Header createHeader(VirtualCollection vc) {
        final CMD.Header header = new CMD.Header();
        header.setMdCreationDate(dataTypeFactory.newXMLGregorianCalendar(DATE_FORMAT.format(new Date())));
        header.setMdProfile(VIRTUAL_COLLECTION_PROFILE_ID);
        header.getMdCreator().add(vc.getOwner().getName());
        header.setMdSelfLink(vc.getPersistentIdentifier().getIdentifier());
        return header;
    }

    private CMD.Resources createResources(VirtualCollection vc) {
        final CMD.Resources resources = new CMD.Resources();

        final CMD.Resources.ResourceProxyList resourceProxyList = new CMD.Resources.ResourceProxyList();
        resources.setResourceProxyList(resourceProxyList);
        final List<ResourceProxy> proxyList = resourceProxyList.getResourceProxy();

        for (Resource resource : vc.getResources()) {
            final ResourceProxy resourceProxy = new ResourceProxy();
            if (resource.getId() == null) {
                resourceProxy.setId("r" + UUID.randomUUID().toString());
            } else {
                resourceProxy.setId("r" + Long.toString(resource.getId()));
            }
            resourceProxy.setResourceRef(resource.getRef());

            final ResourceType type = new ResourceType();
            if (resource.getType() == Resource.Type.METADATA) {
                type.setValue(ResourcetypeSimple.METADATA);
            } else {
                type.setValue(ResourcetypeSimple.RESOURCE);
            }
            resourceProxy.setResourceType(type);

            proxyList.add(resourceProxy);
        }

        // add empty instance of mandatory journal file proxy list
        resources.setJournalFileProxyList(new CMD.Resources.JournalFileProxyList());
        // add empty instance of mandatory resource relation list
        resources.setResourceRelationList(new CMD.Resources.ResourceRelationList());
        return resources;
    }

    private CMD.Components createComponents(VirtualCollection vc) {
        final CMD.Components.VirtualCollection virtualCollection = new CMD.Components.VirtualCollection();
        virtualCollection.setName(vc.getName());
        virtualCollection.setDescription(vc.getDescription());
        virtualCollection.setCreationDate(getCreationDate(vc));
        virtualCollection.setStatus(getStatus(vc));
        virtualCollection.setReproducability(getReproducability(vc));
        virtualCollection.setPurpose(getPurpose(vc));
        virtualCollection.setOrigin(""); //TODO: ??
        virtualCollection.setCreator(getCreator(vc));
        virtualCollection.setGeneratedBy(new CMD.Components.VirtualCollection.GeneratedBy());

        if (vc.getReproducibilityNotice() == null) {
            virtualCollection.setReproducabilityNotice("");
        } else {
            virtualCollection.setReproducabilityNotice(vc.getReproducibilityNotice());
        }

        final CMD.Components components = new CMD.Components();
        components.setVirtualCollection(virtualCollection);
        return components;
    }

    private XMLGregorianCalendar getCreationDate(VirtualCollection vc) {
        final Date creationDate = vc.getCreationDate();
        return dataTypeFactory.newXMLGregorianCalendar(DATE_FORMAT.format(creationDate));
    }

    private ComplextypeStatus1 getStatus(VirtualCollection vc) {
        final ComplextypeStatus1 status = new ComplextypeStatus1();
        switch (vc.getState()) {
            //TODO: Improve mapping
            case PUBLIC:
                status.setValue(SimpletypeStatus1.FINAL);
            default:
                status.setValue(SimpletypeStatus1.DRAFT);
        }
        return status;
    }

    private ComplextypeReproducability1 getReproducability(VirtualCollection vc) {
        final ComplextypeReproducability1 reproducability = new ComplextypeReproducability1();
        if (vc.getReproducibility() != null) {
            switch (vc.getReproducibility()) {
                //TODO: better mapping
                case FLUCTUATING:
                    reproducability.setValue(SimpletypeReproducability1.INTENDED);
                    break;
                case INTENDED:
                    reproducability.setValue(SimpletypeReproducability1.INTENDED);
                    break;
                case UNTENDED:
                    reproducability.setValue(SimpletypeReproducability1.NOT_INTENDED);
                    break;
            }
        }
        return reproducability;
    }

    private ComplextypePurpose1 getPurpose(VirtualCollection vc) {
        final ComplextypePurpose1 purpose = new ComplextypePurpose1();
        if (vc.getPurpose() != null) {
            switch (vc.getPurpose()) {
                case FUTURE_USE:
                    purpose.setValue(SimpletypePurpose1.FUTURE_USE);
                    break;
                case REFERENCE:
                    purpose.setValue(SimpletypePurpose1.REFERENCE);
                    break;
                case RESEARCH:
                    purpose.setValue(SimpletypePurpose1.RESEARCH);
                    break;
                case SAMPLE:
                    purpose.setValue(SimpletypePurpose1.SAMPLE);
                    break;
            }
        }
        return purpose;
    }

    private CMD.Components.VirtualCollection.Creator getCreator(VirtualCollection vc) {
        final CMD.Components.VirtualCollection.Creator creator = new CMD.Components.VirtualCollection.Creator();
        if (vc.getCreators().size() > 0) {
            final Creator vcCreator = vc.getCreators().get(0);
            creator.setName(vcCreator.getPerson());
            creator.setEmail(vcCreator.getEMail());
            creator.setOrganisation(vcCreator.getOrganisation());
        }
        return creator;
    }

}
